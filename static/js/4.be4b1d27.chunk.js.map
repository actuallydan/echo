{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","components/Button.js","utils/generate.js","components/GunTableLabel.js","components/GunDisplay.js","components/Input.js","components/Fieldset.js","components/StatusBar.js","components/HealDamage.js","pages/Dashboard.js"],"names":["_objectWithoutProperties","source","excluded","key","i","target","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","Button","label","onClick","color","props","useGlobal","theme","btnColor","styles","border","boxShadow","filter","className","style","classes","type","damage","range","brands","elements","uniformSample","n","Math","random","generateGun","rarity","classType","element","gun","find","c","floor","id","uuid","parseInt","brand","bonusDamage","split","newDamageCount","dieType","calculateDamage","roll","d","dmg","quantity","quantity2","d2","replace","crypto","getRandomValues","Uint8Array","toString","GunTableLabel","hideDamage","labelStyles","headerStyle","borderBottom","GunDisplay","useState","damageInst","setDamageInst","fire","setFire","elementStyles","lightning","cold","force","necrotic","marginLeft","toLowerCase","map","word","charAt","toUpperCase","slice","join","fontSize","getDamage","margin","Input","value","onChange","inputColor","Fieldset","children","fieldSetStyles","padding","marginBottom","legendStyles","StatusBar","blue","total","remaining","width","toFixed","background","fieldsetStyles","borderColor","regen","HealDamage","shieldRemaining","setShieldRemaining","sp","hp","healthRemaining","setHealthRemaining","amount","setAmount","useEffect","amountLeft","e","currentTarget","marginRight","amt","Dashboard","guns","global","shouldRegenShield","backup","JSON","stringify","localStorage","setItem"],"mappings":"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","file":"static/js/4.be4b1d27.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","import React, { useGlobal } from \"reactn\";\n\nexport default function Button({ label = \"Button\", onClick, color, ...props }) {\n  const [theme] = useGlobal(\"theme\");\n\n  const btnColor = color || theme || \"#00DFFE\";\n  const styles = {\n    border: \"2px solid \" + btnColor,\n    color: btnColor,\n    boxShadow: \"inset 0px 0px 0.1em \" + btnColor,\n    filter: `drop-shadow(0px 0px 0.5em ${btnColor})`,\n  };\n\n  return (\n    <div {...props} onClick={onClick} className=\"button\" style={styles}>\n      {label}\n    </div>\n  );\n}\n","const classes = [\n  { type: \"pistol\", damage: \"2d6\", range: 40 },\n  { type: \"assault_rifle\", damage: \"2d10\", range: 60 },\n  { type: \"sniper_rifle\", damage: \"1d12\", range: 200 },\n  { type: \"shotgun\", damage: \"4d4\", range: 20 },\n  { type: \"rocket_launcher\", damage: \"2d20\", range: 60 },\n  { type: \"submachine_gun\", damage: \"3d4\", range: 40 },\n];\n\nconst brands = [\n  \"Dahl\",\n  \"Hyperion\",\n  \"Jakobs\",\n  \"Maliwan\",\n  \"Tediore\",\n  \"Torgue\",\n  \"Vladof\",\n];\n\nconst elements = [\"fire\", \"lightning\", \"cold\", \"force\", \"necrotic\"];\n\nconst uniformSample = (n) => {\n  return (Math.random() * (n + 1) + (n - 1)) | 0;\n};\n\nexport function generateGun(\n  rarity = 1,\n  classType = null,\n  brand = null,\n  element = null\n) {\n  // initialize gun with base stats\n  const gun = {\n    ...(classes.find((c) => c.type === classType) ||\n      classes[Math.floor(Math.random() * 6)]),\n    id: uuid(),\n    rarity: parseInt(rarity, 10),\n    brand: brands[Math.floor(Math.random() * 7)],\n    range: 40 + uniformSample(rarity - 1) * 10,\n    bonusDamage: null,\n    element: null,\n  };\n\n  // additional damage if any\n  let [newDamageCount, dieType] = gun.damage.split(\"d\");\n  newDamageCount = parseInt(newDamageCount, 10) + rarity - 1;\n  gun.damage = newDamageCount + \"d\" + dieType;\n\n  // modify base range\n  gun.range = gun.range + uniformSample(rarity - 1) * 10;\n\n  // apply base bonus damage if any\n  gun.bonusDamage =\n    gun.brand === \"Jakobs\"\n      ? null\n      : Math.random() > 0.8 || gun.brand === \"Maliwan\"\n      ? \"d6\"\n      : null;\n\n  // number of bonus damage dice\n  if (gun.bonusDamage) {\n    gun.bonusDamage = uniformSample(rarity + 1) + gun.bonusDamage;\n    // if element provided, use element\n    gun.element = element\n      ? element\n      : gun.element !== \"Torgue\"\n      ? elements[Math.floor(Math.random() * 7)]\n      : \"force\";\n  }\n  return gun;\n}\n\nexport function calculateDamage(gun) {\n  const roll = (d) => Math.floor(Math.random() * d) + 1;\n  let dmg = 0;\n  const [quantity, d] = gun.damage.split(\"d\");\n\n  for (let i = 0; i < quantity; i++) {\n    dmg += roll(d);\n  }\n  if (gun.bonusDamage) {\n    const [quantity2, d2] = gun.bonusDamage.split(\"d\");\n    for (let i = 0; i < quantity2; i++) {\n      dmg += roll(d2);\n    }\n  }\n  return dmg;\n}\n\nfunction uuid() {\n  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) =>\n    (\n      c ^\n      (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))\n    ).toString(16)\n  );\n}\n","import React, { useGlobal } from \"reactn\";\n\nexport default function GunTableLabel({ hideDamage = false }) {\n  const [theme] = useGlobal(\"theme\");\n\n  const labelStyles = {\n    color: theme,\n  };\n\n  const headerStyle = {\n    borderBottom: `1px solid ${theme}`,\n  };\n\n  return (\n    <div className=\"row gunRow gunTableLabel\" style={headerStyle}>\n      <div className=\"column\">\n        <div style={labelStyles}>Name</div>\n      </div>\n      <div className=\"column\">\n        <div style={labelStyles}>Range</div>\n      </div>\n      <div className=\"column\">\n        <div style={labelStyles}>Damage</div>\n      </div>\n      {!hideDamage && (\n        <div className=\"column\">\n          <div style={labelStyles}>Last Roll</div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport Button from \"./Button\";\nimport { calculateDamage } from \"../utils/generate\";\n\nexport default function GunDisplay({\n  gun: { type, brand, range, damage, rarity, element, bonusDamage },\n  hideDamage = false,\n}) {\n  const [damageInst, setDamageInst] = useState(null);\n  const [fire, setFire] = useState(0);\n\n  const bang = () => {\n    const getDamage = calculateDamage({\n      type,\n      brand,\n      range,\n      damage,\n      rarity,\n      element,\n      bonusDamage,\n    });\n\n    setDamageInst(getDamage);\n    setFire(fire + 1);\n  };\n\n  const colorsByRarity = [\"#FFFFFF\", \"#00FF00\", \"#00DFFE\", \"#ffc107\"];\n  const color = colorsByRarity[rarity - 1];\n\n  const labelStyles = {\n    color,\n  };\n\n  const elementMap = {\n    fire: \"#FF5050\",\n    lightning: \"#0030FF\",\n    cold: \"#00dffe\",\n    force: \"yellow\",\n    necrotic: \"green\",\n  };\n\n  const elementColor = element ? elementMap[element] : null;\n\n  const elementStyles = {\n    color: elementColor,\n    marginLeft: \"0.5em\",\n  };\n\n  return (\n    <div className=\"row gunRow\">\n      <div className=\"column\">\n        <div style={labelStyles}>\n          {type\n            .replace(\"_\", \" \")\n            .toLowerCase()\n            .split(\" \")\n            .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n            .join(\" \")}\n        </div>\n        <div style={{ ...labelStyles, fontSize: \"0.7em\" }}>{brand}</div>\n      </div>\n\n      <div className=\"column\">\n        <div style={labelStyles}>{range} ft</div>\n      </div>\n      <div className=\"column\">\n        <div className=\"row\">\n          <Button\n            label={damage}\n            onClick={bang}\n            color={color}\n            style={{ margin: 0 }}\n          />\n          {element && <div style={elementStyles}>+{bonusDamage}</div>}\n        </div>\n      </div>\n      {!hideDamage && (\n        <div className=\"column\">\n          {damageInst && (\n            <div key={fire} className={\"popOff\"} style={labelStyles}>\n              {damageInst}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { useGlobal } from \"reactn\";\n\nexport default function Input({\n  value = 0,\n  color,\n  onChange,\n  style = {},\n  ...props\n}) {\n  const [theme] = useGlobal(\"theme\");\n\n  const inputColor = color || theme || \"#00DFFE\";\n  const styles = {\n    border: \"2px solid \" + inputColor,\n    color: inputColor,\n    boxShadow: \"inset 0px 0px 1em \" + inputColor,\n    filter: `drop-shadow(0px 0px 0.2em ${inputColor}20)`,\n    ...style,\n  };\n\n  return (\n    <input\n      className=\"input\"\n      type=\"number\"\n      onChange={onChange}\n      style={styles}\n      value={value}\n      {...props}\n    />\n  );\n}\n","import React, { useGlobal } from \"reactn\";\n\nexport default function Fieldset({ children, label }) {\n  const [theme] = useGlobal(\"theme\");\n\n  const fieldSetStyles = {\n    border: `2px solid ${theme}`,\n    padding: \"1em\",\n    marginBottom: \"2em\",\n  };\n  const legendStyles = {\n    color: theme,\n  };\n\n  return (\n    <fieldset className=\"fieldsetSection\" style={fieldSetStyles}>\n      <legend style={legendStyles}>{label}</legend>\n      {children}\n    </fieldset>\n  );\n}\n","import React from \"react\";\n\nexport default function StatusBar({\n  blue = false,\n  total = 10,\n  remaining = 10,\n  ...props\n}) {\n  const color = blue ? \"#00dffc\" : \"#F44336\";\n\n  const styles = {\n    width: ((remaining / total) * 100).toFixed(2) + \"%\",\n    background: color,\n  };\n\n  const fieldsetStyles = {\n    borderColor: blue ? \"#00dffc\" : \"#F44336\",\n    boxShadow: \"inset 0px 0px 1em \" + color,\n    filter: `drop-shadow(0px 0px ${(remaining / total) * 0.5 + \"em\"} ${color})`,\n  };\n\n  const regen = () => {\n    props.regen(blue);\n  };\n\n  return (\n    <div>\n      <fieldset\n        className=\"statusBarFieldSet\"\n        onClick={regen}\n        style={fieldsetStyles}\n      >\n        <legend className=\"legend textBorder\">{remaining}</legend>\n        <div className=\"statusBarInner\" style={styles}></div>\n      </fieldset>\n    </div>\n  );\n}\n","import React, { useEffect, useState, useGlobal } from \"reactn\";\nimport Button from \"./Button\";\nimport Input from \"./Input\";\n\nexport default function HealDamage(props) {\n  const [shieldRemaining, setShieldRemaining] = useGlobal(\"shieldRemaining\");\n  const [sp] = useGlobal(\"sp\");\n  const [hp] = useGlobal(\"hp\");\n\n  const [healthRemaining, setHealthRemaining] = useGlobal(\"healthRemaining\");\n  const [amount, setAmount] = useState(0);\n\n  const doDamage = () => {\n    const amt = parseInt(amount, 10);\n\n    let amountLeft = amt;\n\n    // if damage done is excessive (double total sp) we still do health damage\n    if (amountLeft > sp * 2) {\n      amountLeft = amountLeft - sp * 2;\n      setShieldRemaining(0);\n\n      setHealthRemaining(\n        amountLeft >= healthRemaining ? 0 : healthRemaining - amountLeft\n      );\n      amountLeft = 0;\n    }\n\n    // return early if need be\n    if (amountLeft <= 0) {\n      return;\n    }\n\n    // first do damage to shield, then hp if none available\n    if (shieldRemaining > 0) {\n      setShieldRemaining(\n        amountLeft >= shieldRemaining ? 0 : shieldRemaining - amountLeft\n      );\n    } else {\n      setHealthRemaining(\n        amountLeft >= healthRemaining ? 0 : healthRemaining - amountLeft\n      );\n    }\n  };\n\n  useEffect(() => {\n    setAmount(0);\n  }, [healthRemaining, shieldRemaining]);\n\n  const updateAmount = (e) => {\n    setAmount(e.currentTarget.value);\n  };\n\n  const addHealth = () => {\n    const amt = parseInt(amount, 10);\n\n    if (healthRemaining + amt >= hp) {\n      setHealthRemaining(hp);\n    } else {\n      setHealthRemaining(healthRemaining + amt);\n    }\n  };\n\n  const inputStyles = { marginLeft: \"1em\", marginRight: \"1em\" };\n  return (\n    <div className=\"row center\">\n      <Button onClick={doDamage} label={\"-\"} color={\"#F44336\"} />\n      <Input value={amount} onChange={updateAmount} style={inputStyles} />\n      <Button onClick={addHealth} label={\"+\"} color={\"#09ff9b\"} />\n    </div>\n  );\n}\n","import React, { useGlobal, useEffect } from \"reactn\";\nimport StatusBar from \"../components/StatusBar\";\nimport HealDamage from \"../components/HealDamage\";\n\nimport GunTableLabel from \"../components/GunTableLabel\";\nimport GunDisplay from \"../components/GunDisplay\";\nimport Fieldset from \"../components/Fieldset\";\n\nexport default function Dashboard() {\n  const [sp] = useGlobal(\"sp\");\n  const [hp] = useGlobal(\"hp\");\n  const [guns] = useGlobal(\"guns\");\n  const [shieldRemaining, setShieldRemaining] = useGlobal(\"shieldRemaining\");\n  const [healthRemaining, setHealthRemaining] = useGlobal(\"healthRemaining\");\n\n  const [global] = useGlobal();\n\n  const regen = (shouldRegenShield) => {\n    shouldRegenShield ? setShieldRemaining(sp) : setHealthRemaining(hp);\n  };\n\n  useEffect(() => {\n    const backup = JSON.stringify(global);\n    localStorage.setItem(\"BL_Backup\", backup);\n  }, [shieldRemaining, healthRemaining]);\n\n  return (\n    <div id=\"dashboard\">\n      <Fieldset label={\"Health & Shields\"}>\n        {/* SP */}\n        <StatusBar blue total={sp} remaining={shieldRemaining} regen={regen} />\n        {/* HP */}\n        <StatusBar total={hp} remaining={healthRemaining} regen={regen} />\n\n        {/* Damage/Heal */}\n        <HealDamage />\n      </Fieldset>\n\n      <Fieldset label={\"Guns\"}>\n        <GunTableLabel />\n        {guns && guns.map((gun) => <GunDisplay key={gun.id} gun={gun} />)}\n      </Fieldset>\n    </div>\n  );\n}\n"],"sourceRoot":""}